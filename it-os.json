{
	"info": {
		"_postman_id": "7512a510-8671-4593-8681-b700dca62c70",
		"name": "it-online-school",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25577673"
	},
	"item": [
		{
			"name": "Activity",
			"item": [
				{
					"name": "Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"social test\", function  () {\r",
									"    const arr = pm.response.json().type;\r",
									"    const type = pm.globals.get(\"type\");\r",
									"    if(arr == type){\r",
									"        console.log(\"type test ok\",arr,type)\r",
									"    }\r",
									"    else{console.log(\"test stop\",arr,type)}\r",
									"\r",
									"\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "text",
									"value": "{{text}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://www.boredapi.com/api/activity?type=social&participants=2",
							"protocol": "https",
							"host": [
								"www",
								"boredapi",
								"com"
							],
							"path": [
								"api",
								"activity"
							],
							"query": [
								{
									"key": "type",
									"value": "social"
								},
								{
									"key": "participants",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Translation",
			"item": [
				{
					"name": "Mandalorian",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    let data = pm.response.json().contents.translated;\r",
									"    let answer = pm.environment.get(\"answer\");\r",
									"    pm.expect(data).to.include(answer);});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "text",
									"value": "{{text}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{TranslateBaseUrl}}/{{lang}}",
							"host": [
								"{{TranslateBaseUrl}}"
							],
							"path": [
								"{{lang}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Minion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    let data = pm.response.json().contents.translated;\r",
									"    let answer = pm.environment.get(\"answer\");\r",
									"    pm.expect(data).to.include(answer);});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "text",
									"value": "{{text}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{TranslateBaseUrl}}/{{lang}}",
							"host": [
								"{{TranslateBaseUrl}}"
							],
							"path": [
								"{{lang}}"
							],
							"query": [
								{
									"key": "text",
									"value": "{{text}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Translate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    let data = pm.response.json().contents.translated;\r",
									"    let answer = pm.environment.get(\"answer\");\r",
									"    pm.expect(data).to.include(answer);});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "text",
									"value": "{{text}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{TranslateBaseUrl}}/{{lang}}",
							"host": [
								"{{TranslateBaseUrl}}"
							],
							"path": [
								"{{lang}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Animal",
			"item": [
				{
					"name": "cat facts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response animalType ok\", function  () {\r",
									"    const arr =  pm.response.json();\r",
									"    const type = pm.environment.get(\"animalType2\");\r",
									"    arr.forEach((fact)=>{\r",
									"    pm.expect(fact.type).to.eql(type);\r",
									"    console.log(fact.type,type)\r",
									"    })\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Response amount ok\", function () {\r",
									"     let arr = Object(pm.response.json());\r",
									"     let amount = Number(pm.environment.get(\"amount\"));\r",
									"     for( i = 0;i < arr.length;i++);\r",
									"     if(i == amount){\r",
									"         console.log(\"Amount test ok\",arr, amount)\r",
									"     }\r",
									"     else {\r",
									"         console.log(\"Amount test stop\",arr, amount)\r",
									"     }\r",
									"});\r",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{animalBaseUrl}}/facts/random?animal_type=cat&amount=2",
							"host": [
								"{{animalBaseUrl}}"
							],
							"path": [
								"facts",
								"random"
							],
							"query": [
								{
									"key": "animal_type",
									"value": "cat"
								},
								{
									"key": "amount",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "dog facts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Response animalType ok\", function  () {\r",
									"    const arr =  pm.response.json();\r",
									"    const type = pm.environment.get(\"animalType\");\r",
									"    arr.forEach((fact)=>{\r",
									"    pm.expect(fact.type).to.eql(type);\r",
									"    console.log(fact.type,type)\r",
									"    })\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Response amount ok\", function () {\r",
									"     let arr = Object(pm.response.json());\r",
									"     let amount = Number(pm.environment.get(\"amount\"));\r",
									"     for( i = 0;i < arr.length;i++);\r",
									"     if(i == amount){\r",
									"         console.log(\"Amount test ok\",arr, amount)\r",
									"     }\r",
									"     else {\r",
									"         console.log(\"Amount test stop\",arr, amount)\r",
									"     }\r",
									"});\r",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{animalBaseUrl}}/facts/random?animal_type={{animalType}}&amount={{amount}}",
							"host": [
								"{{animalBaseUrl}}"
							],
							"path": [
								"facts",
								"random"
							],
							"query": [
								{
									"key": "animal_type",
									"value": "{{animalType}}"
								},
								{
									"key": "amount",
									"value": "{{amount}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "horse facts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response animalType ok\", function  () {\r",
									"    const arr =  pm.response.json();\r",
									"    const type = pm.environment.get(\"animalType\");\r",
									"    arr.forEach((fact)=>{\r",
									"    pm.expect(fact.type).to.eql(type);\r",
									"    console.log(fact.type,type)\r",
									"    })\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Response amount ok\", function () {\r",
									"     let arr = Object(pm.response.json());\r",
									"     let amount = Number(pm.environment.get(\"amount\"));\r",
									"     for( i = 0;i < arr.length;i++);\r",
									"     if(i == amount){\r",
									"         console.log(\"Amount test ok\",arr, amount)\r",
									"     }\r",
									"     else {\r",
									"         console.log(\"Amount test stop\",arr, amount)\r",
									"     }\r",
									"});\r",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{animalBaseUrl}}/facts/random?animal_type={{animalType}}&amount={{amount}}",
							"host": [
								"{{animalBaseUrl}}"
							],
							"path": [
								"facts",
								"random"
							],
							"query": [
								{
									"key": "animal_type",
									"value": "{{animalType}}"
								},
								{
									"key": "amount",
									"value": "{{amount}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "eyJhbGciOiJIUzI1NiJ9.cXVlc3Q.gcnCrfALVCLUMu_WlBR9j9koQYNKUUA3jxfG363EBbg",
				"type": "string"
			},
			{
				"key": "key",
				"value": "request_token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					" pm.test(\"Json is not null ok\", function () {",
					"   pm.expect(Object(pm.response)).not.eql(null);",
					"});",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"pm.test(\"Status code  ok\", function () {",
					"   pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
					"});",
					"",
					"pm.test(\"Time 1000 ok\", function () {",
					"  pm.expect(pm.response.responseTime).to.be.below(500)});",
					"  ",
					"",
					"  pm.test(\"Test Headers ok\", function(){",
					"    pm.response.to.be.header(\"Connection\",\"keep-alive\")",
					"})",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TranslateBaseUrl",
			"value": "https://api.funtranslations.com/translate",
			"type": "string"
		},
		{
			"key": "animalBaseUrl",
			"value": "https://cat-fact.herokuapp.com",
			"type": "string"
		}
	]
}
